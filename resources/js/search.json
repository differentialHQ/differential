[[{"l":"Differential","p":["Build, Connect and Evolve production services 10x faster with delightful DX!","Differential is in the technical preview stage, and is open-source. We are working hard to make our cloud offering generally available. Sign up for the waitlist here.","Differential is a Service Orchestration Framework that enables developers to turn a set of functions into a typesafe service, without spending additional effort on managing service contracts, network communication, searialization/deserialization service authentication or infrastructure configuration. The latter concerns are completely abstracted away from the developer, and are handled by Differential.","It is designed to:","Lower the barrier to entry for a service-oriented architecture","Make it significantly cheaper to run a service-oriented architecture","Provide a delightful developer experience for building and evolving services"]}],[{"l":"Buiding your first service","p":["Learn to build an end to end Differential app in under 2 minutes with TypeScript and Node.js."]},{"l":"1. Set up and Install","p":["Run the following command in your terminal to set up a hello world project","This will:","Clone the Differential app template into a dirctory called my-app","Install the dependencies","Fetch a temporary API secret for you to use and insert it to src/d.ts file"]},{"l":"2. Start the hello service","p":["This will start a service called hello and register itself with the Cloud control-plane."]},{"l":"3. Call the running service","p":["This will call the greet command on the hello service and print the result."]},{"l":"Extending the hello service","p":["Let's add a new command to the hello service that will greet someone in a different language, so you can write some code."]},{"l":"1. Add a new function to the hello service","p":["Open up the src/services/hello.ts file and add the following function, under the exising hello function:","As you can see, this function fetches a list of greetings from a fake API and returns the appropriate one. A Differential function can do anything a normal Node.js function can do, including making network requests."]},{"l":"2. Register the function with the service"},{"l":"3. Change the greet command to call the new function","p":["You can replace the greet.ts file with the following. We're just extending the existing command to take a new language parameter and call the new function."]},{"l":"4. Call the new command"}],[{"l":"Thinking in Differential","p":["Differential is a little bit different (pun intended) from the way it looks at separation of services from the way you might be used to.","It's built on the core beliefs that: Monolithic code does not need to result in co-located services.","It's not a RPC framework, or a microservices framework. If you're familiar with a service mesh, you can think of it as a higher-level, app-code aware service mesh."]},{"l":"The Differential Way","p":["1. Services are a collection of functions.","2. There are no restrictions on what these functions can do. They are just functions.","3. All services are co-located in the same codebase, so they can share code and types.","4. Starting a service is as simple as calling d.start(). Stopping is done via a d.stop().","You can have 1:1 services to processes, or you can have multiple services running in the same process. It's up to you. You can also start and stop services dynamically at runtime.","5. Once a service is started, it registers itself with the control-plane.","The open-source control-plane is a central service that keeps track of all the services that are running, and their health. It acts as a service registry, and a service bus.","6. You can call any function in any service from any other service.","You don't need to know where the service is running, or how to connect to it. You just need to know the name of the service and the name of the function.","7. Thanks to co-located code, your function calls are type-safe","You can't call a function that doesn't exist, or pass the wrong arguments.","8. Calling a function has the same ergonomics as calling a local function.","You can just call the function and it will return the result, even if it results in an Error. SDK and the control-plane routes the function call to the correct service, and does the proper serialization and deserialization of arguments and return values."]},{"i":"why","l":"Why?","p":["1. Monolithic codebases provide a great developer experience, but resulting monolithic services often do not.","2. Writing duplicative service interfaces/contracts can be avoided.","3. Anything a service has ever done can and should be represented by a single function definition.","4. Internal services should remain internal.","5. The disadvantages of a centralized control-plane are outweighed by the advantages.","A service bus that is aware of the application code can provide a better developer experience by offering type-safety and a single place to find all the services and their functions.","A service should stay internal until it's ready or necessary to be exposed externally. Starting a service on a port should be a conscious decision, not the default.","A type-safe language that can infer types should be able to infer the contract of a service from the service's implementation.","Communication via queues and pub/sub is a possible alternative, but it introduces complexities such as keeping track of channels:message types, message serialization, message delivery guarantees, and additional infrastructure configuration that lives outside of the code that does the work.","Differential is an opinionated framework. It makes some tradeoffs to make it easier to build services. They might not be the right tradeoffs for you, but we think they are the right tradeoffs for most people.","Every RPC framework introduces more complexity to deal with the impedance mismatch between the language and the wire format.","GraphQL has queries and mutations, but you need complex tooling to generate the types.","In REST, it's hard to model operations that doStuff().","Instead of n services talking to n services, a service bus allows streamlining the communication to a single service and fan-out from there.","Keeping unnecessary services running is wasteful. You can't just run the background processes; you have to run the entire service.","Modern RPC frameworks like gRPC and tRPC solve some of the problems, but they make different tradeoffs for stronger contracts and language/runtime interoperability.","Not having a compile step to generate contracts (e.g., protobufs) or a duplicative interface (tRPC) definition allows you to move faster.","Scaling a single service is hard. You can't scale just the background processes; you have to scale the entire service.","Such an architecture allows for a single place to implement cross-cutting concerns such as authentication, authorization, rate limiting, and observability.","Unless you're very careful, heavy background processes can affect the high availability of your mission-critical services."]}],[{"l":"API Reference","p":["This is the official documentation for Differential SDK for Typescript. Package source code is available here."]},{"l":"Installation"},{"l":"Basic Usage"},{"l":"1. Initializing Differential","p":["Create a file named d.ts which will be used to initialize Differential. This file will export the Differential instance."]},{"l":"2. Hello World Service","p":["In a separate file, create the \"Hello World\" service. This file will import the Differential instance from d.ts and define the service."]},{"l":"3. Calling the Service","p":["When calling the service, use the typeof generic to ensure type safety. This can be done in any file where you need to call the service, like a test file or another service file."]},{"l":"4. Running the Service","p":["To run the service, simply run the file with the service definition. This will start the service and make it available to other services.","and then you can invoke the service from another file:"]}],[{"i":"class-differential","l":"Class: Differential","p":["The Differential client. This is the main entry point for using Differential.","Differential client exposes two main methods:","service- Registers a service with Differential. This will register all functions on the service.","client- Provides a type safe client for performing calls to a registered service.","Example"]},{"l":"Table of contents"},{"l":"Constructors","p":["constructor"]},{"l":"Methods","p":["client","service"]},{"i":"constructors-1","l":"Constructors"},{"l":"constructor","p":["• new Differential( apiSecret): Differential","Initializes a new Differential instance."]},{"l":"Parameters","p":["Name","Type","Description","apiSecret","string","The API Secret for your Differential cluster. You can obtain one from https://api.differential.dev/demo/token."]},{"l":"Returns","p":["Differential"]},{"l":"Defined in","p":["src/Differential.ts:398"]},{"i":"methods-1","l":"Methods"},{"l":"client","p":["▸ client< T>( service): ServiceClient< T>","Provides a type safe client for performing calls to a registered service. Waits for the function to complete before returning, and returns the result of the function call."]},{"l":"Type parameters","p":["Name","Type","T","extends RegisteredService< any>"]},{"i":"parameters-1","l":"Parameters","p":["Name","Type","service","T[definition][name]"]},{"i":"returns-1","l":"Returns","p":["ServiceClient< T>","ServiceClient","Example"]},{"i":"defined-in-1","l":"Defined in","p":["src/Differential.ts:518","▸ client< T>( service, options): BackgroundServiceClient< T>","Provides a type safe client for performing calls to a registered service. Waits for the function to complete before returning, and returns the result of the function call."]},{"i":"type-parameters-1","l":"Type parameters","p":["Name","Type","T","extends RegisteredService< any>"]},{"i":"parameters-2","l":"Parameters","p":["Name","Type","service","T[definition][name]","options","Object","options.background","true"]},{"i":"returns-2","l":"Returns","p":["BackgroundServiceClient< T>","ServiceClient","Example"]},{"i":"defined-in-2","l":"Defined in","p":["src/Differential.ts:522"]},{"l":"service","p":["▸ service< T, N>( service): RegisteredService< T>","Registers a service with Differential. This will register all functions on the service."]},{"i":"type-parameters-2","l":"Type parameters","p":["Name","Type","T","extends ServiceDefinition< N>","N","extends string"]},{"i":"parameters-3","l":"Parameters","p":["Name","Type","Description","service","T","The service definition."]},{"i":"returns-3","l":"Returns","p":["RegisteredService< T>","A registered service instance.","Example"]},{"i":"defined-in-3","l":"Defined in","p":["src/Differential.ts:494"]}],[{"l":"Concepts"},{"l":"Service","p":["A collection of functions that can be called by a consumer using the differential client. Defined using the SDK."]},{"l":"Host","p":["A computer that you operate and own, that runs your services."]},{"l":"Cluster","p":["A group services that are running on a host. An API key is required to join a cluster."]},{"l":"Control Plane","p":["A central service that keeps track of all the services that are running, and their health. It acts as a service registry, and a service bus."]}],[{"i":"explain-like-im","l":"Explain like I'm"},{"l":"A distributed systems expert","p":["Framework Nature: Differential is a Service Orchestration Framework, focusing on easing the transition from monolithic codebases to a service-oriented architecture.","Monolithic Development, Distributed Deployment: Enables writing code in a monolithic style while facilitating deployment as distributed, independent services.","Functional Service Definition: Services are defined as collections of functions, abstracting away the typical complexities of defining and managing network-level service contracts.","Type Safety and Code Co-location: All services coexist within the same codebase, allowing shared code and types, ensuring type-safe inter-service communication.","Runtime Service Orchestration: Provides mechanisms (d.start(), d.stop()) for dynamic service management, enabling runtime flexibility in service deployment and scalability.","Centralized Control Plane: Implements a control plane for service registry, health monitoring, and as a service bus, centralizing cross-cutting concerns (authentication, authorization, rate limiting, observability).","Transparent Inter-Service Communication: Facilitates calling functions across services transparently, similar to local function invocations, abstracting the underlying network communication.","First-Class TypeScript Support: Leveraging TypeScript's type system for type-safe interactions and reducing runtime errors, enhancing developer productivity.","Opinionated Trade-offs: Emphasizes certain trade-offs (e.g., centralized control plane vs decentralized discovery) to streamline development and maintenance of distributed services."]},{"l":"A commercial software developer","p":["Service Orchestration Framework: Differential is a framework designed to simplify turning functions into services, akin to how frameworks like Express.js streamline web server creation.","Monolithic Code, Distributed Deployment: You can write code as if it were a monolith (similar to a single Node.js app) but deploy it as separate, scalable services, much like Docker containers in a microservices architecture. Differential is deployment-agnostic, so you can deploy to a single server, multiple servers, or a serverless environment.","Services as Function Collections: Define services as groups of functions (resembling AWS Lambda), focusing on business logic without the overhead of traditional service contracts. These services exist as a single codebase, allowing shared code and types.","Shared Codebase, Type Safety: All services are in one codebase (think monorepo style, like with Yarn Workspaces), ensuring shared code and type consistency across services.","Dynamic Service Lifecycle: Services can be dynamically started and stopped at runtime (similar to starting/stopping Docker containers) using simple d.start() and d.stop() methods.","Central Control Plane: Functions as a service registry and bus, like a combination of Eureka for service discovery and Kafka for message passing, centralizing service management.","Transparent Inter-Service Communication: Allows function calls between services without worrying about network details, much like calling a local function, simplifying the typical REST or gRPC communication patterns.","Simplifies Service-Oriented Architecture: Aims to lower the barrier and cost of running a service-oriented architecture, addressing common challenges you might face with traditional microservices frameworks. (It's not FaaS)"]},{"l":"A high school student with some programming experience","p":["Framework for Building Web Services: Differential is a tool that helps developers turn parts of their code into web services easily. It's like how frameworks like Flask or Express help you build web applications, but for creating services.","Write Once, Deploy Many: You can write your code in one big piece (like a single project or app), but when you're ready to run it, Differential lets you break it into smaller, independent parts (services). This is a bit like building a big project for a class and then breaking it into smaller, more manageable pieces for presentation.","Services Are Just Functions: In Differential, services are made up of functions (like the functions you write in Python or JavaScript). There's no need for complex setups or configurations – it's about focusing on the code that does the work.","Shared Codebase: All your services live in the same project (think of it as one big folder with all your code). This makes it easier to share code and ensures everything works well together, similar to how you might structure a final year project with different modules.","Easy to Start and Stop Services: Just like you can start a local server for a web app, Differential allows you to easily start or stop these services with simple commands.","Central Hub for Managing Services: There's a central place that keeps track of all your different services, much like how a project dashboard might show you different components of your project and their status.","Easy Communication Between Services: Services can talk to each other very easily, without needing to know complex details about where they are or how they're connected. It's like calling a function in one part of your code from another part, but these parts can be running separately.","Great for TypeScript Users: If you've used TypeScript, Differential is designed to work really well with it, making sure your code is correct and doing what it's supposed to do."]},{"l":"A five-year-old","p":["Special Lego Rules: Think of Differential like a special set of rules for playing with LEGOs. You can build many different things like cars, houses, or spaceships using the same LEGO blocks, but each one is its own cool toy.","Building Big Toys in Pieces: It's like when you build a big toy, but you can take apart different pieces and they still work like smaller toys. You can mix and match parts to make new toys!","Magic Box for Toys: Imagine you have a magic box where you put your LEGO toys. The box helps you find the right pieces and tells them how to work together, so your toys always turn out great.","Easy to Change Toys: If you want to change a part of your toy, like putting a new wheel on a car or adding a window to a house, it's super easy. The magic box helps you do it without having to rebuild the whole toy.","Playing with Others: If your friends have toys made with the same magic box, all of your toys can talk to each other and play together, making fun new games.","Special Toy Language: The magic box is really good at understanding a special toy language, making sure that all your toys understand each other perfectly.","Making Toy Building Fun: This magic box makes building complicated toys as fun and easy as playing with your simplest LEGO sets, so you can make amazing things without getting frustrated."]}],[{"l":"Changelog"},{"l":"2023-12-20","p":["Documentation","Adding ELIs, and reorganizing docs 18eecef"]},{"l":"2023-12-21","p":["Documentation","Re-write the intro section a78ca60"]},{"l":"2023-12-18","p":["Documentation","Depreacate all obsolete documentation. Generate new ts docs 9a8b7d9","Re-organize all docs directories b1bf2a6"]},{"l":"2023-12-19","p":["Documentation","Update docs to remove PoolConfig references 676c461"]},{"l":"2023-12-17","p":["Features","Updating the docs to 3.0 732247b"]},{"l":"2023-12-16","p":["Documentation","Update docs to reflect 3.0 56c69ce"]},{"l":"2023-12-12","p":["Chores","Adding docs to the monorepo 5110192","Adding the SDK to monorepo c3bb7db","Documentation","Updating the docs to new package name f9b81aa"]}]]